✅ 시스템 개요

이 시스템은 TurtleBot4 기반 실내 배송 로봇이며, YOLO 기반 객체 인식 기능을 통해 특정 상품(예: RC카)을 추적하며 waypoint 기반 경로를 따라 배송 임무를 수행합니다. 배터리 잔량에 따라 자동 도킹/언도킹 및 충전 관리 기능을 포함하며, 향후 복수 로봇 간 충돌 방지를 위한 시각 기반 인식 기능(YOLO)을 추가할 예정입니다.
🧩 시스템 구조 (모듈 구성)

    명령 처리 및 상태 관리 모듈

        주문 수신, 처리 상태, 큐 관리

        현재 상태 표시 기능 (배송 중 / 충전 중 / 대기 중 등)

    경로 주행 및 내비게이션 모듈

        waypoints 기반 경로 추종 (hub → cross → home → cross → stay or dock)

        Nav2 stack 기반 followWaypoints 사용

    YOLO 객체 인식 및 추적 모듈

        목표 객체 인식 및 접근 거리 측정

        RC카 정지 여부 판단 → TurtleBot 정지

        향후 다중 로봇 간 충돌 방지 시스템에 확장 가능

    배터리 관리 모듈

        /robot<n>/battery_state 토픽을 활용한 실시간 배터리 모니터링

        배송 완료 후만 배터리 확인 수행

        40% 이하 시 자동 도킹 및 충전

        충전 중에도 요청은 큐에 적재하지만, 충전 80% 미만이면 출발 금지

    도킹/언도킹 모듈

        수동 or 자동 도킹 및 언도킹 명령 처리

        초기 상태에서 자동 undock 후 배송 개시

        충전 종료 후 대기 상태 전환

    후처리 및 시스템 종료 모듈 (선택적)

        시스템 종료 조건 판단 (모든 배송 완료, 에러 발생 시 등)

        향후 로깅이나 결과 통계 기능 추가 가능

⚙️ 시스템 요구사항
하드웨어

    TurtleBot4 with ROS2 (Humble)

    Depth Camera for YOLO 인식 및 거리 추정

    도킹 스테이션 (charging dock)

소프트웨어

    ROS2 기반 모듈화 구조 (Node 별 실행)

    Nav2, rclpy, actionlib, tf2_ros, sensor_msgs, geometry_msgs 등 ROS2 core 패키지

    YOLOv8 이상 (커스텀 모델)

    맵 및 Waypoints JSON 기반 저장 및 재사용

설계 제약사항 및 조건

    이모티콘 금지, 불필요한 출력 최소화

    실시간 배터리 체크는 하지 않음 (배송 직후만 체크)

    충전량 80% 이상일 경우에만 도중 출발 허용

    pause/resume 기능은 기본적으로 구현하지 않음 (충돌 방지 시스템 도입 시 검토)

🧠 통합 시나리오 예시

    초기 실행 → 자동 undock → 배송 요청 대기

    요청 수신 → waypoint 경로에 따라 이동

    hub → cross → home → cross → stay 순서로 주행

    도착 후 배송 종료 → stay로 이동 → 배터리 체크

    40% 이하 → 자동 도킹 및 충전 시작

    충전 도중 요청 발생 → 큐에 저장

    충전량이 80% 이상이 되면 자동 undock 후 큐 처리

🪛 확장 가능성 및 후속 고려사항

로깅 및 UI 로그 뷰어

충돌 회피 기능: YOLO 기반 주변 객체 판단 후 pause/resume 판단

SLA 기반 큐 우선순위 처리 (긴급 요청 우선 처리 등)

다중 TurtleBot 운용 시 클러스터 설계 (중앙 서버, 로컬 간 통신 등)

    배터리 예측 기반 경로 조정 (배터리 소모량 예측 후 stay 대신 dock 이동)

필요 시 위 내용을 바탕으로 다이어그램(예: flowchart, state machine) 도 작성해 드릴 수 있어요. 추가 정리나 시각화가 필요하면 말씀 주세요.
